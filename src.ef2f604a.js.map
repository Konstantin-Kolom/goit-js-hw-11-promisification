{"version":3,"sources":["js/them1.js","js/them2.js","js/them3.js","index.js"],"names":["delay","ms","promise","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","idTrans","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAEA,MAAMA,EAAQC,IAOJC,OANS,IAAIC,QAASC,IAC1BC,WAAW,KACRD,EAAQH,IACRA,MAOHK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;AChBjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAQzBd,OAPS,IAAIC,QAASC,IAI1BA,EAHqBW,EAASE,IAAIC,GAC/BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,OAQhEZ,EAASa,GAAgBX,QAAQY,MAAMD,GAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC9BnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB5B,MAAAA,EAAQqB,EAA0B,IAAK,KAarCnB,OAXS,IAAIC,QAAQ,CAACC,EAASyB,KACnCxB,WAAW,KAEJyB,GADeN,KAAKE,SAAW,GACnB,CACPK,MAAAA,EAAUH,EAAYI,GAC5B5B,EAAQ,CAAC2B,QAAAA,EAAS/B,MAAAA,SAErB6B,EAAOD,EAAYI,KAEnBhC,MAKHiC,EAAcD,IAElBxB,QAAQC,mBAAmBuB,EAAGD,wBAAwBC,EAAGhC,YAIrDkC,EAAWF,IACfxB,QAAQ2B,qCAAqCH,+BAa/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAC/B1B,KAAKuB,GACLI,MAAMH,GAETP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACJI,MAAMH;;ACrDV,aAJA,QAAA,+CAEA,QAAA,iBACA,QAAA,iBACA,QAAA","file":"src.ef2f604a.js","sourceRoot":"../src","sourcesContent":["//  console.log(`Задание 1`); \n\nconst delay = ms => {\n   const promise = new Promise((resolve) => {\n      setTimeout(() => {\n         resolve(ms);\n      }, ms)\n   });\n\n   return promise;\n\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n","// console.log(`Задание 2`);\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n   const promise = new Promise((resolve) => {\n      const updatedUsers = allUsers.map(user =>\n         user.name === userName ? { ...user, active: !user.active } : user,\n      );\n      resolve(updatedUsers)\n   });\n\n   return promise;\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n","// console.log(`Задание 3`);\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n   const promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n         const canProcess = Math.random() > 0.3;\n         if (canProcess) {\n            const idTrans = transaction.id;\n            resolve({idTrans, delay});\n         } else {\n         reject(transaction.id,);\n         }\n      }, delay);\n   })\n   return promise;\n};\n\nconst logSuccess = (id) => {\n\n  console.log(`Transaction ${id.idTrans} processed in ${id.delay}ms`);\n};\n\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n   .catch(logError);\n  \n","import '../node_modules/normalize.css/normalize.css'\n\nimport './js/them1.js'\nimport './js/them2.js'\nimport './js/them3.js'\n\n\n\n\n\n"]}